---
title: "<span style='color:white; background-color: #1fb8cc4a; font-size: 66px;'>Enhancing Efficiency and Workflow of Bio Statistics Teams</span>"
subtitle: "<span style='color:white; background-color: #1fb8cc4a; font-size: 24px;'>Converting Repeated Processes to a Shiny Suite of Applications for <br/>Reproducibility, Reporting, and Scalability </span>"
author: "<span style='color:white;'>Mayank Agrawal<br/><span style='font-size: 22px;'>Senior R developer Consultant I<br/>ProCogia</span></span>"
title-slide-attributes: 
  data-background-image: "data/LinkedIn_Banner_01.png"
  data-background-opacity: "0.75"
date: '2023-10-27'
date-format: full
format: 
  revealjs:
    footer: "R Pharma 2023"
    smaller: true
    slide-number: true
    transition: slide
    transition-speed: fast
    theme: [default, custom.scss]
editor: visual
self-contained: true
---

## Hello there!

-   Background: Computer Science Engineer and MBA in Business Analytics.
-   Curious to learn.
-   Using R and R Shiny for 6+ years.
-   Designed, built and managed more than 40+ R Shiny applications and dashboards.
-   Built and led teams of 10+ R developers.
-   Trained 30+ colleagues on R from diverse backgrounds.
-   Extensive hands on experience on all flavors of R products - Shiny, R Markdowns, Quarto, and package development.
-   Working with [**ProCogia**](https://procogia.com/){target="_blank"}; an Official [full service partner](https://posit.co/certified-partners/){target="_blank"} with Posit.

![](data/logo_hi.png){.absolute bottom="2rem" right="0" height="200"}

------------------------------------------------------------------------

## Current Challenges

Clinical Trails are often complex and time consuming with repeated similar workflow steps for each new variation of the trail.

::: columns
::: {.column width="50%"}
::: fragment
This often leads to

-   Delayed Analysis and reporting
-   Longer on-boarding time
-   Delayed Time to Market

resulting in

-   Hindered workflows
-   Lower productivity
-   Repeated boring processes
:::
:::

::: {.column width="50%"}
::: fragment
#### Key Issues

-   Manual processes
-   Lengthy simulation times
-   Scalability tonstraints
-   Limited collaboration
-   Reporting challenges
-   Flexibility
-   Reproducibility
:::
:::
:::

![](data/logo_struggle.png){.absolute bottom="5rem" right="0" height="200"}

------------------------------------------------------------------------

## Solution

**Empowering Biostatisticians with R Shiny suite of applications**

::: incremental
-   Collaborated with Biostats to understand their pain points and challenges.
-   Developed a basic R Shiny app (MVP) for dosage simulation.
-   Fully scaled through an iterative process of development and feedback
-   Created multiple R Shiny apps targetted to specific workflows.
-   Developed an ecosystem of Biostatistics R Shiny applications
-   Automated and improved reporting.
-   Enhanced workflow efficiency and productivity among biostats team
:::

![](data/logo_route.png){.absolute bottom="8rem" right="0" height="200"}

------------------------------------------------------------------------

## What was the journey to success?

![](data/img_car_journey.jpg){fig-align="center"}

------------------------------------------------------------------------

## Migration Process Steps

-   Define scope of each process.
-   Document [repetition rate]{style="text-decoration:underline"}, [importance]{style="text-decoration:underline"}, and [time investment]{style="text-decoration:underline"} for each work request.
-   Identify the most time-consuming, yet simplest workflow.
-   Develop a **MVP** (Minimum Viable Product)
    -   Showcase a demo with the smallest workflow.
    -   This aids leaders in visualizing the impact of approval.
-   Integrate workflows incrementally from small to large.

![](data/logo_migration.png){.absolute bottom="6rem" right="0" height="250"}

------------------------------------------------------------------------

## Engage with the Biostats team

-   Weekly feedback sessions with biostats team and other stakeholders
-   Adopt **Agile methodology** for faster iterative improvement and development.
-   Procatively address feedback from from end users
    -   Prioritize features based on complexity, time, effort and need.
    -   Research and address suggested features to keep developers and users engaged and happy.
-   Utilize GitHub Issues to document feature requests or bug fixes.
    -   Ensure commits are linked with respective issues for traceability during testing.
-   A picture speaks a thousand words. If it can be explained with a **screenshot**, don't shy away.
-   Establish clear requirements to expedite implementation, with developer input on the overall app workflow.

------------------------------------------------------------------------

## Principles of Application Design

-   Think about creating and showcasing dashboard outlines in the early discussions.
    -   Prototype the UI layout using [draw.io](draw.io){target="_blank"} or similar tools.
    -   Use conditional panels, modules, and well-designed layouts to create a user-friendly interface.
    -   Iterate rapidly to test how different implementations enhance UI/UX.
-   Establish a standard application/dashboard template layout such as [Shiny Dashboard](https://rstudio.github.io/shinydashboard/){target="_blank"}, [bslib](https://rstudio.github.io/bslib/){target="_blank"} and/or [bs4Dash](https://rinterface.github.io/bs4Dash/index.html){target="_blank"}.
    -   Create custom R function wrappers based on organization theme and color layout.
    -   Re-use the template for new builds and ideas to maintain consistency and coherence.

------------------------------------------------------------------------

## Principles of Application Design

-   Define the **flow of reactivity** for the overall application/dashboard.
    -   **Waterfall Reactivity Model**.
    -   Avoid **Reactivity Spaghetti Mess**
    -   Leverage reactive UI elements based on user input. This enhances interactivity and responsiveness.
-   Provide default selections for input widgets, enabling users to explore and understand the application easily.
-   Prioritize user-friendliness: if it's not intuitive, it won't be used.
-   Incorporate "tooltips", "notifications", section write-ups and clear instructions to guide users in using the application.

------------------------------------------------------------------------

## Organize your project structure

::: columns
::: {.column width="50%"}
-   Maintain a clear and logical directory structure.
-   Group related files together for easy navigation.
-   Create, adopt and enforce a standard development template for easier developer onboarding.
-   Have a project template repository for initial cloning.
-   Please refer to the right image for an illustrative R project directory structure.
:::

::: {.column width="50%"}
![](data/ss_rstudio_dir_tree.png){fig-align="center"}
:::
:::

------------------------------------------------------------------------

## Streamline Workflow

-   Use RStudio Projects
    -   Isolates your development environment.
    -   Relative path referencing for your project files.
    -   Segregate development flow and context.
-   Version Control with Git
    -   Track changes, collaborate with team members, and manage project history effectively using Git.
    -   Use Issues, Pull Requests and Connected Commits for efficient and effortless parallel development.

![](data/question.png){.absolute top="3rem" right="0" height="200"}

------------------------------------------------------------------------

## Shiny Development Tips

-   Establish and adhere to a **standard** file and code structure.
-   Implement **coding standards** to facilitate seamless collaboration between Bio Statistics teams and R developers.
-   Emphasize the use of **functions** and **shiny modules** whenever possible.
-   Optimize Server logic via **Profiling** and performance tuning
    -   Minimize unnecessary computations and avoid redundant calculations.
    -   Use tools like `profvis` to identify **performance bottlenecks** and Optimize critical sections of your code for speed.
    -   Use **benchmarking** techniques to compare computation speeds of various packages. Refer R function `rbenchmark::benchmark()`.
-   Create smaller, independent **Proof of Concepts (POCs)** for new feature requests.
    -   For example, capture simulation attributes in a table and select them for subsequent runs.

------------------------------------------------------------------------

## Shiny Development Tips

-   Debugging like a pro
    -   Debug via `browser()`, `debug(function_name)`, and debug points.
    -   Set breakpoints, step through code, and inspect variables to troubleshoot efficiently.
-   Apply standard software development principles:
    -   DRY (Don't Repeat Yourself)
    -   YAGNI (You aren't going to need it)
    -   KISS (Keep it Simple Silly)
    -   Document your code for humans.
    -   Prioritize clean code at all times.
    -   Separation of concerns.

![](data/logo_idea.png){.absolute bottom="50" right="0" height="200"}

------------------------------------------------------------------------

## Facilitate Consistent Reporting

::: columns
::: {.column width="50%"}
-   Utilize **parameterized markdown** reports for dynamic MS Word report generation within the application.
-   Adhere to the organization's document template for uniformity in reporting.
-   Ensure each page or process has a predefined standard write-up with dynamic bits/sections based on simulation calculations.
:::

::: {.column width="50%"}
![](data/img_reporting.jpg){fig-align="center"}
:::
:::

------------------------------------------------------------------------

## Ensuring Reproducibility

-   Leverage package management tools
    -   Utilize [`renv`](https://rstudio.github.io/renv/articles/renv.html){target="_blank"} or [`packrat`](https://github.com/rstudio/packrat){target="_blank"} to manage package dependencies.
    -   Provides a controlled environment for your project.
    -   Ensure reproducibility and minimize version conflicts.
-   Rely on packages published and actively maintained on **CRAN** for a validated R environment.
-   Establish unit tests for all functions used to ensure accurate and consistent results.
-   Invest time to create an in-depth GitHub ReadMe with the sections **Project Overview**, **Getting Started**, **User Application Flow and Usage**, **Key Programming Concept Implemented** (if any) and **Developer Guide** providing comprehensive project reproducibility instructions.

------------------------------------------------------------------------

## Enhancing Scalability

-   Implement **modularization** and **functional programming** for a **plug-and-play** development format across applications.
-   Enable multiple studies to be added concurrently using standard **git branching strategies**, involving multiple concurrent developers.
-   **Async Programming**: Evaluate longer simulations in a **separate R process** preventing app performance issues.
    -   Few R packages to aid this are: [callr](https://github.com/r-lib/callr/){target="_blank"}, [mirai](https://github.com/shikokuchuo/mirai){target="_blank"}, [crew](https://github.com/wlandau/crew){target="_blank"}, [coro](https://github.com/r-lib/coro){target="_blank"}, [future](https://github.com/HenrikBengtsson/future){target="_blank"} and [promises](https://github.com/rstudio/promises/){target="_blank"}
-   Take a step further and deploy simulation functions as internal APIs with **Plumber**.
-   Write your **custom JavaScript and R bindings** for implementing unique feature requests.
-   Approach feature requests as a blend of **web development**, **software engineering**, and **R development**.

------------------------------------------------------------------------

## Utilize Automated Testing

::: columns
::: {.column width="50%"}
::: fragment
-   Writing Test Cases (Inputs, Expected Outputs)
-   Full Stack Testing
    -   [testthat](https://github.com/r-lib/testthat/){target="_blank"} for back-end testing,
    -   [shinytest2](https://github.com/rstudio/shinytest2/){target="_blank"} for front end testing, and
    -   [shinyloadtest](https://github.com/rstudio/shinyloadtest/){target="_blank"} for load testing.
-   Types of Tests: **Unit**, **Functional**, **Integration**, and **End-to-End**
-   Continuous Integration for Testing with Git branching strategies.
:::
:::

::: {.column width="50%"}
::: fragment
-   Benefits
    -   Early bug detection
    -   Efficiency and speed
    -   Consistent and repeatable testing
    -   Increased test coverage
    -   Regression testing capabilities
    -   Greater confidence in release stability
:::
:::
:::

------------------------------------------------------------------------

## Common Application Features

-   Download any **visualization** from the application.
-   Access downloadable interim **simulation calculations** , aiding in simulation fine-tuning.
-   Download **dynamically** rendered MS Word **reports** with FDA submission format for faster review and iterative changes.
-   Add and execute multiple simulations simultaneously for efficiency.
    -   **Compare** similar graphs side by side for comprehensive analysis across all simulations.
    -   Generate dynamic **grouped plots** based on the sequence of simulations requested.
-   Receive **email notifications** to stay updated on the progress of lengthy simulations, along with attached reports.

------------------------------------------------------------------------

## Common Application Features

-   Include and display the underlying **mathematical equation** for a study or simulation on the user interface using **LaTeX**.
-   Receive appropriate **notifications** upon completion of each process.
-   **Helper Tabs** for - Application Information, Usage Manual, Release Tabs, Feedback and Contact Business Lead - all through the application.
    -   Distribute an updated User Manual in the quarterly release email and include it as a 'User Manual' tab within the application.
    -   Feature a 'User Feedback' tab for direct communication of feedback with the project manager via email.
    -   Include a 'Release Notes' tab to display app changes over time, promoting transparency.

------------------------------------------------------------------------

## Enhancing User Adoption

-   Create **GIFs** showcasing the application layout and user flow.
    -   Include them in the Git readme and announcement emails.
-   Create detailed application interaction user manuals with screenshots and highlights for each step.
-   Conduct regular (quarterly) **training sessions** to provide guidance, answer questions, and assist users with new features.
    -   Record and share them for easier re-visit.
-   Continuously engage user base for better ROI and on boarding.
-   Prioritize most requested user features for each sprint.

![](data/logo_user_team.png){.absolute bottom="5rem" right="0" height="200"}

------------------------------------------------------------------------

## Thank you

-   Quarto presentation code available on [GitHub](https://github.com/mayank-procogia/r-pharma-2023){target="_blank"} at [http://bit.ly/3ZHZTNf](http://bit.ly/3ZHZTNf){target="_blank"}
-   Slides available on [GitHub Pages](https://github.com/mayank-procogia/r-pharma-2023/enhancing_workflow_efficiency_of_bio_stats.html){target="_blank"} at [https://bit.ly/3RsdExn](https://bit.ly/3RsdExn){target="_blank"}
-   Connect and/or send me a DM for a follow up question or catch up
    -   Linkedin: [mayank-agrawal-7jan](https://www.linkedin.com/in/mayank-agrawal-7jan/){target="_blank"}
    -   X (previously Twitter): [mayank7jan](https://twitter.com/mayank7jan){target="_blank"}
    -   Mastodon: [mayank7j](https://fosstodon.org/@mayank7j){target="_blank"}

![](data/logo_thank_you_signboard.png){.absolute bottom="5rem" right="0" height="200"}

------------------------------------------------------------------------

## References - R Packages

-   [shinyDashboard](https://rstudio.github.io/shinydashboard/){target="_blank"}, [bslib](https://rstudio.github.io/bslib/){target="_blank"}, [bs4dash](https://rinterface.github.io/bs4Dash/index.html){target="_blank"} for standard dashboard template.
-   [rmarkdown](https://github.com/rstudio/rmarkdown){target="_blank"} and [Quarto](https://quarto.org/docs/computations/r.html){target="_blank"} for parameterized reporting.
-   [renv](https://rstudio.github.io/renv/articles/renv.html){target="_blank"} for package management in a R project.
-   [glue](https://glue.tidyverse.org/){target="_blank"} for interpreted string literals for dynamic reporting.
-   [callr](https://github.com/r-lib/callr/){target="_blank"} for separate r sessions.
-   [plumber](https://github.com/rstudio/plumber/){target="_blank"} for API creation.
-   [httr2](https://github.com/r-lib/httr2/){target="_blank"} for API calls.
-   [pins](https://github.com/rstudio/pins-r/){target="_blank"} for shareable secured publishing of data, models, and R objects
-   [testthat](https://github.com/r-lib/testthat/){target="_blank"}, [shinytest2](https://github.com/rstudio/shinytest2/){target="_blank"} and [shinyloadtest](https://github.com/rstudio/shinyloadtest/){target="_blank"} for testing.
-   [dplyr](https://github.com/tidyverse/dplyr/){target="_blank"} for data manipulation.
-   [ggplot2](https://github.com/tidyverse/ggplot2){target="_blank"}, [plotly](https://github.com/plotly/plotly.R){target="_blank"} and [echarts4r](https://github.com/JohnCoene/echarts4r){target="_blank"} for visualization.
-   [profvis](http://rstudio.github.io/profvis/){target="_blank"} for code profiling and time estimation
